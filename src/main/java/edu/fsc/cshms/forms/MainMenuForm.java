/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.fsc.cshms.forms;

import edu.fsc.cshms.Main;
import edu.fsc.cshms.homework.Homework;
import edu.fsc.cshms.homework.forms.HomeworkDialog;
import edu.fsc.cshms.data.DataManager;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class MainMenuForm extends javax.swing.JFrame {
    
    private DataManager dataManager;
    
    private LinkedList<Homework> activeTableHomeworkData;

    /**
     * Creates new form MainMenu
     */
    public MainMenuForm() {
        initComponents();
    
        dataManager = DataManager.getDataManager();
        activeTableHomeworkData = new LinkedList<Homework>();
        
        comboBoxSearchBy.setModel(new DefaultComboBoxModel<>(Homework.getFieldSearchBy()));
        
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || (f.isFile() && (f.getName().endsWith(".csh")));
            }

            @Override
            public String getDescription() {
                return "College Student Homework File (.csh)";
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        panelHomeworks = new javax.swing.JPanel();
        scrollPaneHomeworks = new javax.swing.JScrollPane();
        tableHomeworks = new javax.swing.JTable();
        panelSearch = new javax.swing.JPanel();
        labelSearchBy = new javax.swing.JLabel();
        checkBoxSearchExcCompleted = new javax.swing.JCheckBox();
        comboBoxSearchBy = new javax.swing.JComboBox<>();
        buttonSearch = new javax.swing.JButton();
        textFieldSearchFilter = new javax.swing.JTextField();
        labelFilter = new javax.swing.JLabel();
        panelHomeworkControls = new javax.swing.JPanel();
        buttonAdd = new javax.swing.JButton();
        buttonComplete = new javax.swing.JButton();
        buttonView = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        buttonPruge = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemRead = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        separatorMenuFile = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuOptions = new javax.swing.JMenu();
        menuTheme = new javax.swing.JMenu();
        menuInfo = new javax.swing.JMenu();
        menuItemGitHub = new javax.swing.JMenuItem();
        separatorHelp = new javax.swing.JPopupMenu.Separator();
        menuItemAbout = new javax.swing.JMenuItem();

        fileChooser.setAcceptAllFileFilterUsed(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("College Student Homework Management System");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelHomeworks.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Homeworks", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        tableHomeworks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Couse", "Description", "Due Date", "Time To Spend", "Weight", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHomeworks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableHomeworks.getTableHeader().setReorderingAllowed(false);
        scrollPaneHomeworks.setViewportView(tableHomeworks);

        javax.swing.GroupLayout panelHomeworksLayout = new javax.swing.GroupLayout(panelHomeworks);
        panelHomeworks.setLayout(panelHomeworksLayout);
        panelHomeworksLayout.setHorizontalGroup(
            panelHomeworksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeworksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneHomeworks)
                .addContainerGap())
        );
        panelHomeworksLayout.setVerticalGroup(
            panelHomeworksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeworksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneHomeworks, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        labelSearchBy.setText("Search By:");

        checkBoxSearchExcCompleted.setText("Don't Show Completed Homeworks");

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        labelFilter.setText("Search Filter:");

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSearchLayout.createSequentialGroup()
                        .addComponent(labelSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSearchLayout.createSequentialGroup()
                        .addComponent(labelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSearchLayout.createSequentialGroup()
                                .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxSearchExcCompleted))
                            .addComponent(textFieldSearchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(458, Short.MAX_VALUE))
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSearchBy)
                    .addComponent(comboBoxSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldSearchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFilter))
                .addGap(18, 18, 18)
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSearch)
                    .addComponent(checkBoxSearchExcCompleted))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonComplete.setText("Mark as Complete");
        buttonComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCompleteActionPerformed(evt);
            }
        });

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonPruge.setText("Purge Completed");
        buttonPruge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrugeActionPerformed(evt);
            }
        });

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHomeworkControlsLayout = new javax.swing.GroupLayout(panelHomeworkControls);
        panelHomeworkControls.setLayout(panelHomeworkControlsLayout);
        panelHomeworkControlsLayout.setHorizontalGroup(
            panelHomeworkControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeworkControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonView, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPruge, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelHomeworkControlsLayout.setVerticalGroup(
            panelHomeworkControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeworkControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHomeworkControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonComplete)
                    .addComponent(buttonView)
                    .addComponent(buttonUpdate)
                    .addComponent(buttonPruge)
                    .addComponent(buttonRefresh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuFile.setMnemonic('F');
        menuFile.setText("File");

        menuItemRead.setMnemonic('O');
        menuItemRead.setText("Open");
        menuItemRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReadActionPerformed(evt);
            }
        });
        menuFile.add(menuItemRead);

        menuItemSaveAs.setMnemonic('S');
        menuItemSaveAs.setText("Save As");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveAs);
        menuFile.add(separatorMenuFile);

        menuItemExit.setMnemonic('x');
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuOptions.setText("Options");

        menuTheme.setText("Switch Theme");
        menuOptions.add(menuTheme);

        menuBar.add(menuOptions);

        menuInfo.setMnemonic('I');
        menuInfo.setText("Info");

        menuItemGitHub.setMnemonic('G');
        menuItemGitHub.setText("GitHub Repo");
        menuItemGitHub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGitHubActionPerformed(evt);
            }
        });
        menuInfo.add(menuItemGitHub);
        menuInfo.add(separatorHelp);

        menuItemAbout.setMnemonic('A');
        menuItemAbout.setText("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuInfo.add(menuItemAbout);

        menuBar.add(menuInfo);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHomeworks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelHomeworkControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHomeworks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelHomeworkControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReadActionPerformed
        int result = fileChooser.showOpenDialog(this);
        
        if(result != JFileChooser.APPROVE_OPTION)
            return;
        
        File selectedFile = fileChooser.getSelectedFile();
        
        if(selectedFile == null)
            return;
        
        try {
            if(!selectedFile.isFile() || !selectedFile.exists())
                return;

            FileInputStream fis = new FileInputStream(selectedFile.getAbsolutePath());
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            Homework homework;
            
            try {
                homework = (Homework) ois.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
                
                JOptionPane.showMessageDialog(this, "Couldn't open homework file\n\nPossibly it refers to a file saved by an older version of the application\n\n" + "Details:\n" + ex.getMessage(), "Incompatible File", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ois.close();
            fis.close();
            
            int addHomework = JOptionPane.showConfirmDialog(this, "Do you want to add the homework in the newly opened file?", "Add Homework", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(addHomework != JOptionPane.YES_OPTION) {
                viewHomework(homework);
                return;
            }
            
            LinkedList<Homework> homeworks = activeTableHomeworkData;
        
            if(homeworks.contains(homework)) {
                JOptionPane.showMessageDialog(this, "An identical homework already exists and is already in progress", "Redundant Input", JOptionPane.ERROR_MESSAGE);
                
                viewHomework(homework);
                return;
            }
            
            homeworks.add(homework);
            
            dataManager.setHomeworks(homeworks);
            dataManager.dumpDataSet();
            
            activeTableHomeworkData = dataManager.getHomeworks();

            populateHomeworksTable();   
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Couldn't open homework file\n\n" + "Details:\n" + ex.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "An unexpected error Occured\n\n" + "Details:\n" + ex.getMessage(), "Incompatible File", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItemReadActionPerformed

    private void menuItemGitHubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGitHubActionPerformed
        String githubUrl = "https://github.com/ramiayub/College-Student-Homework-Management-System";
        
        Desktop desktop = Desktop.getDesktop();
        
        try {
//            if(!desktop.isSupported(Desktop.Action.APP_OPEN_URI))
//                throw new IOException("Open URI in browser is not supported by runtime");
            
            desktop.browse(URI.create(githubUrl));
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Cann't open Github repo using web browser\n\nCouldn't open the following url:\n" + githubUrl);
        }
    }//GEN-LAST:event_menuItemGitHubActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        HomeworkDialog newHomeworkDialog = new HomeworkDialog(this, true);
        newHomeworkDialog.setVisible(true);
        
        Homework homework = newHomeworkDialog.getHomework();
        
        if(homework == null)
            return;
        
        LinkedList<Homework> homeworks = dataManager.getHomeworks();
        
        if(homeworks.contains(homework)) {
            JOptionPane.showMessageDialog(this, "A homework with identical name already exists and is in progress", "Redundant Input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        homeworks.add(homework);
        
        try {
            dataManager.setHomeworks(homeworks);
            dataManager.dumpDataSet();
            
            activeTableHomeworkData = dataManager.getHomeworks();

            populateHomeworksTable();
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        int selectedRow = tableHomeworks.getSelectedRow();
        
        if(activeTableHomeworkData.isEmpty() || selectedRow < 0)
            return;
        
        Homework homework = activeTableHomeworkData.get(selectedRow);
        HomeworkDialog viewHomeworkDialog = new HomeworkDialog(this, true, homework, false);
        viewHomeworkDialog.setVisible(true);
    }//GEN-LAST:event_buttonViewActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            MainMenuForm frameRef = this;
            
            UIManager.LookAndFeelInfo themes[] = UIManager.getInstalledLookAndFeels();
        
            for (int i = 0; i < themes.length; i++) {
                final UIManager.LookAndFeelInfo theme = themes[i];
                
                JCheckBoxMenuItem menuItemTheme = new JCheckBoxMenuItem(theme.getName());
                
                if(UIManager.getLookAndFeel().getClass().getName().equals(theme.getClassName()))
                    menuItemTheme.setSelected(true);
                
                menuItemTheme.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JCheckBoxMenuItem cbMenuItem = (JCheckBoxMenuItem) e.getSource();
                        
                        try {
                            UIManager.setLookAndFeel(theme.getClassName());
                            SwingUtilities.updateComponentTreeUI(frameRef);
                            
                            Component parentComponents[] = cbMenuItem.getParent().getComponents();

                            for(Component component : parentComponents) {
                                if(component instanceof JCheckBoxMenuItem) {
                                    JCheckBoxMenuItem otherCbMenuItem = ((JCheckBoxMenuItem) component);

                                    if(!otherCbMenuItem.equals(cbMenuItem))
                                        otherCbMenuItem.setSelected(false);
                                }
                            }
                            
                            dataManager.setActiveTheme(theme.getClassName());
                            dataManager.dumpDataSet();
                        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException | IOException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            cbMenuItem.setSelected(false);
                        }
                    }
                });
                
                menuTheme.add(menuItemTheme);
            }
            
            this.dataManager.loadDataSet();
            activeTableHomeworkData = dataManager.getHomeworks();
            populateHomeworksTable();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "A critical error occured and prevented access to application data store.\n\nDetails:\n" + ex.getMessage(), "Unexpected Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }//GEN-LAST:event_formWindowOpened

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        
        int selectedRow = tableHomeworks.getSelectedRow();
        
        if(activeTableHomeworkData.isEmpty() || selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Homework must be selected first", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        LinkedList<Homework> homeworks = dataManager.getHomeworks();
        Homework homework = homeworks.get(homeworks.indexOf(activeTableHomeworkData.get(selectedRow)));
                
        HomeworkDialog editHomeworkDialog = new HomeworkDialog(this, true, homework, true);
        editHomeworkDialog.setVisible(true);
        
        if(editHomeworkDialog.getHomework() == null)
            return;
                
        try {
            dataManager.setHomeworks(homeworks);
            dataManager.dumpDataSet();
            
            activeTableHomeworkData = dataManager.getHomeworks();

            populateHomeworksTable();
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompleteActionPerformed
        int selectedRow = tableHomeworks.getSelectedRow();
        
        if(activeTableHomeworkData.isEmpty() || selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Homework must be selected first", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        LinkedList<Homework> homeworks = dataManager.getHomeworks();
        Homework homework = homeworks.get(homeworks.indexOf(activeTableHomeworkData.get(selectedRow)));
        
        if(homework.IsComplete())
            return;
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to mark the selected homework as completed?", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
        if(confirm != JOptionPane.YES_OPTION)
            return;
        
        homework.setAsCompleted();
        
        try {
            dataManager.setHomeworks(activeTableHomeworkData);
            dataManager.dumpDataSet();
            
            activeTableHomeworkData = dataManager.getHomeworks();

            populateHomeworksTable();
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonCompleteActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        int selectedRow = tableHomeworks.getSelectedRow();
        
        if(activeTableHomeworkData.isEmpty() || selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Homework must be selected first", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Homework homework = activeTableHomeworkData.get(selectedRow);
                
        int result = fileChooser.showSaveDialog(this);
        
        if(result != JFileChooser.APPROVE_OPTION)
            return;
        
        File selectedFile = fileChooser.getSelectedFile();
        
        if(selectedFile == null)
            return;
        
        try {
            if(selectedFile.exists()) {
                int confirm = JOptionPane.showConfirmDialog(this, "File already exists, are you sure you want to continue and save homework?", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                if(confirm != JOptionPane.YES_OPTION)
                    return;
            }
            else
                selectedFile.createNewFile();
            
            String filePath = selectedFile.getAbsolutePath();
        
            if(!filePath.endsWith(".csh")) {
                filePath += ".csh";
            }

            FileOutputStream fos = new FileOutputStream(filePath);
            ObjectOutputStream oos = new ObjectOutputStream(fos);

            oos.writeObject(homework);
            
            oos.close();
            fos.close();
            
            JOptionPane.showMessageDialog(this, "Homework file saved successfully", "Saved Successfully", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Couldn't save homework file\n\n" + "Details:\n" + ex.getMessage(), "I/O Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        JOptionPane.showMessageDialog(this, "College Student Homework Management System\n\nBy Rami Ayub\n\nCopyright © 2023", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        String searchFilter = textFieldSearchFilter.getText().trim();
        
        if(searchFilter.equals("")) {
            JOptionPane.showMessageDialog(this, "Search criteria must be a non space/empty phrase", "Invalid Search Criteria", JOptionPane.ERROR_MESSAGE);
            textFieldSearchFilter.requestFocus();
            return;
        }
        
        String selectSearchFilter = (String) comboBoxSearchBy.getSelectedItem();
        
        activeTableHomeworkData = dataManager.getHomeworks();
        
        LinkedList<Homework> filterHomeworks = Homework.searchBy(selectSearchFilter, checkBoxSearchExcCompleted.isSelected(), activeTableHomeworkData.listIterator(), searchFilter);
        
        activeTableHomeworkData = filterHomeworks;
        populateHomeworksTable();
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        try {
            this.dataManager.loadDataSet();
            activeTableHomeworkData = dataManager.getHomeworks();
            populateHomeworksTable();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "A critical error occured and prevented access to application data store.\n\nDetails:\n" + ex.getMessage(), "Unexpected Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonPrugeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrugeActionPerformed
        if(activeTableHomeworkData.isEmpty())
            return;
        
        LinkedList<Homework> homeworks = dataManager.getHomeworks();
        
        LinkedList<Homework> deletable = new LinkedList<Homework>();
        
        for(Homework homework : activeTableHomeworkData) {
            
            Homework chkCompleteHomework = homeworks.get(homeworks.indexOf(homework));
            
            if(chkCompleteHomework.IsComplete())
                deletable.add(chkCompleteHomework);
        
        }
        
        if(deletable.isEmpty())
            return;
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to permanently delete all homeworks marked as complete", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
        if(confirm != JOptionPane.YES_OPTION)
            return;
        
        homeworks.removeAll(deletable);
        
        try {
            dataManager.setHomeworks(activeTableHomeworkData);
            dataManager.dumpDataSet();
            
            activeTableHomeworkData = dataManager.getHomeworks();

            populateHomeworksTable();
        } catch (IOException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainMenuForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonPrugeActionPerformed

    private void viewHomework(Homework homework) {
        HomeworkDialog viewHomeworkDialog = new HomeworkDialog(this, true, homework, false);
        viewHomeworkDialog.setVisible(true);
    }
    
    private void populateHomeworksTable() {        
        Vector<Vector> tableData = new Vector<Vector>();// new Object[activeTableHomeworkData.size()][columnNames.length];
        
        Homework homework;
        
        for(int row = 0; row < activeTableHomeworkData.size(); row++) {
            homework = activeTableHomeworkData.get(row);
            tableData.add(homework.toVector());
        }
        
//        DefaultTableModel homeworkTableModel = new DefaultTableModel(
//            tableData,
//            new Vector(Homework.getFieldColumnNames())
//        ) {
//            Class[] types = Homework.getFieldClassTypes();
//            boolean[] canEdit = Homework.getFieldEditable();
//
//            public Class getColumnClass(int columnIndex) {
//                return types [columnIndex];
//            }
//
//            public boolean isCellEditable(int rowIndex, int columnIndex) {
//                return canEdit [columnIndex];
//            }
//        };
//
//        tableHomeworks.repaint();

        DefaultTableModel homeworkTableModel = (DefaultTableModel) tableHomeworks.getModel();
        homeworkTableModel.setDataVector(tableData, new Vector(Homework.getFieldColumnNames()));
        
        tableHomeworks.setModel(homeworkTableModel);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonComplete;
    private javax.swing.JButton buttonPruge;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonView;
    private javax.swing.JCheckBox checkBoxSearchExcCompleted;
    private javax.swing.JComboBox<String> comboBoxSearchBy;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel labelFilter;
    private javax.swing.JLabel labelSearchBy;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuInfo;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemGitHub;
    private javax.swing.JMenuItem menuItemRead;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JMenu menuOptions;
    private javax.swing.JMenu menuTheme;
    private javax.swing.JPanel panelHomeworkControls;
    private javax.swing.JPanel panelHomeworks;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JScrollPane scrollPaneHomeworks;
    private javax.swing.JPopupMenu.Separator separatorHelp;
    private javax.swing.JPopupMenu.Separator separatorMenuFile;
    private javax.swing.JTable tableHomeworks;
    private javax.swing.JTextField textFieldSearchFilter;
    // End of variables declaration//GEN-END:variables
}
